using System;
using System.Linq.Expressions;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;

using MathMax.EventSourcing.Infrastructure.Repositories;

namespace MathMax.EventSourcing.Api.Controllers;

/// <summary>
/// Abstract base controller for handling entity creation operations in an event-sourced system.
/// Provides common functionality for creating entities with proper validation, error handling, 
/// logging, and command processing. Ensures consistency and proper HTTP response codes.
/// </summary>
/// <typeparam name="TRequest">The type of the creation request DTO</typeparam>
/// <typeparam name="TCommand">The type of the command object that will be created from the request</typeparam>
/// <typeparam name="TEvent">The type of the event that will be generated by the command handler</typeparam>
public abstract class CreateEntityControllerBase<TRequest, TCommand, TEvent> : EntityControllerBase<TRequest, TCommand, TEvent>
    where TRequest : class
    where TCommand : class
    where TEvent : class
{
    /// <summary>
    /// Initializes a new instance of the CreateEntityControllerBase class.
    /// </summary>
    /// <param name="logger">The logger instance for recording operations and errors</param>
    /// <param name="handler">The command handler responsible for processing creation commands</param>
    /// <param name="getAggregateIdExpression">Expression to extract the aggregate ID from the request object</param>
    /// <param name="entityName">The human-readable name of the entity type for error messages and logging</param>
    protected CreateEntityControllerBase(
        ILogger logger,
        ICommandHandler<TCommand, TEvent> handler,
        Expression<Func<TRequest, Guid>> getAggregateIdExpression,
        string entityName
    ) : base(logger, handler, getAggregateIdExpression, entityName)
    {
    }

    /// <summary>
    /// Handles HTTP POST requests to create a new entity in the event-sourced system.
    /// Validates the request, creates and executes the appropriate command, and returns 
    /// proper HTTP responses with error handling.
    /// </summary>
    /// <param name="request">The creation request containing the entity data</param>
    /// <returns>
    /// - 201 Created with event envelope if successful
    /// - 400 Bad Request if validation fails
    /// - 409 Conflict if the entity already exists
    /// - 500 Internal Server Error for unexpected errors
    /// </returns>
    [HttpPost]
    [ProducesResponseType(StatusCodes.Status201Created)]
    [ProducesResponseType(StatusCodes.Status400BadRequest)]
    [ProducesResponseType(StatusCodes.Status409Conflict)]
    [ProducesResponseType(StatusCodes.Status500InternalServerError)]
    public async Task<IActionResult> CreateEntity([FromBody] TRequest request)
    {
        try
        {
            var validationResult = await ValidateRequestAsync(request);
            if (validationResult != null)
            {
                Logger.LogWarning(validationResult);
                return BadRequest(validationResult);
            }

            // Create the command from the request
            var command = CreateCommand(request);

            // Execute the command
            var result = await CommandHandler.HandleAsync(command);

            // Log successful creation
            var aggregateId = GetAggregateId(request);
            Logger.LogInformation("Successfully created {EntityName} {AggregateIdProperty} {AggregateId} with version {Version}", 
                EntityName, AggregateIdPropertyName, aggregateId, result.Version);

            // Return the appropriate response
            return CreateSuccessResponse(result, aggregateId);
        }
        catch (EventVersionConflictException ex)
        {
            var aggregateId = GetAggregateId(request);
            var message = GetConflictMessage(ex, request, aggregateId);
            Logger.LogWarning(ex, message);
            return Conflict(message);
        }
        catch (Exception ex)
        {
            var aggregateId = GetAggregateId(request);
            var message = GetServerErrorMessage(ex, request, aggregateId);
            Logger.LogError(ex, message);
            return StatusCode(StatusCodes.Status500InternalServerError, message);
        }
    }

    /// <summary>
    /// Validates the creation request for business rules and data integrity.
    /// Override this method in derived classes to implement entity-specific validation logic.
    /// </summary>
    /// <param name="request">The creation request to validate</param>
    /// <returns>
    /// A task that resolves to an error message string if validation fails, 
    /// or null if the request is valid
    /// </returns>
    protected virtual Task<string?> ValidateRequestAsync(TRequest request)
    {
        return Task.FromResult<string?>(null);
    }

    /// <summary>
    /// Creates a command object from the validated creation request.
    /// This method must be implemented by derived classes to convert the request DTO
    /// into the appropriate command type for the specific entity being created.
    /// </summary>
    /// <param name="request">The validated creation request containing the entity data</param>
    /// <returns>A command object that can be processed by the command handler</returns>
    protected abstract override TCommand CreateCommand(TRequest request);

    /// <summary>
    /// Gets the action name to use in the CreatedAtAction response.
    /// Override this method in derived classes to specify the correct action name
    /// for the created resource location header.
    /// </summary>
    /// <returns>The name of the action method that was used to create the entity</returns>
    protected abstract string GetCreatedAtActionName();

    /// <summary>
    /// Creates the route values object for the CreatedAtAction response.
    /// Override this method in derived classes to specify the correct route parameters
    /// for the created resource location header.
    /// </summary>
    /// <param name="aggregateId">The ID of the newly created entity</param>
    /// <returns>An object containing the route values for the created resource</returns>
    protected abstract object GetCreatedAtRouteValues(Guid aggregateId);

    /// <summary>
    /// Creates the HTTP response for a successful creation operation.
    /// Override this method in derived classes to customize the success response format
    /// or add additional response headers/data.
    /// </summary>
    /// <param name="eventEnvelope">The event envelope containing the generated event and metadata</param>
    /// <param name="aggregateId">The ID of the newly created entity</param>
    /// <returns>An HTTP 201 Created response with the event envelope in the body and location header</returns>
    protected virtual IActionResult CreateSuccessResponse(EventEnvelope<TEvent> eventEnvelope, Guid aggregateId)
    {
        return CreatedAtAction(
            GetCreatedAtActionName(),
            GetCreatedAtRouteValues(aggregateId),
            eventEnvelope);
    }

    /// <summary>
    /// Generates an error message for entity already exists scenarios (HTTP 409 Conflict).
    /// Called when an attempt is made to create an entity that already exists in the system.
    /// </summary>
    /// <param name="ex">The version conflict exception indicating the entity already exists</param>
    /// <param name="request">The creation request for the existing entity</param>
    /// <param name="aggregateId">The ID of the entity that already exists</param>
    /// <returns>A user-friendly error message indicating the entity already exists</returns>
    protected override string GetConflictMessage(EventVersionConflictException ex, TRequest request, Guid aggregateId)
    {
        return $"{EntityName} with {AggregateIdPropertyName} {aggregateId} already exists: {ex.Message}";
    }
}
