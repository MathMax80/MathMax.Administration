using System;
using System.Linq.Expressions;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;

using MathMax.EventSourcing.Infrastructure.Repositories;

namespace MathMax.EventSourcing.Api.Controllers;

/// <summary>
/// Abstract base controller providing common functionality for entity operations in an event-sourced system.
/// Contains shared logic for error handling, logging, validation, and aggregate ID property extraction.
/// Serves as a foundation for specific operation controllers (Create, Update, etc.).
/// </summary>
/// <typeparam name="TRequest">The type of the request DTO</typeparam>
/// <typeparam name="TCommand">The type of the command object that will be created from the request</typeparam>
/// <typeparam name="TEvent">The type of the event that will be generated by the command handler</typeparam>
[ApiController]
[Produces("application/json")]
public abstract class EntityControllerBase<TRequest, TCommand, TEvent> : ControllerBase
    where TRequest : class
    where TCommand : class
    where TEvent : class
{
    /// <summary>
    /// The command handler responsible for processing commands
    /// </summary>
    protected readonly ICommandHandler<TCommand, TEvent> CommandHandler;
    
    /// <summary>
    /// The human-readable name of the entity type for error messages and logging
    /// </summary>
    protected readonly string EntityName;
    
    /// <summary>
    /// The logger instance for recording operations and errors
    /// </summary>
    protected readonly ILogger Logger;
    
    /// <summary>
    /// The name of the aggregate ID property for error messages
    /// </summary>
    protected readonly string AggregateIdPropertyName;
    
    /// <summary>
    /// Compiled function to extract the aggregate ID from the request object
    /// </summary>
    protected readonly Func<TRequest, Guid> GetAggregateId;

    /// <summary>
    /// Initializes a new instance of the EntityControllerBase class.
    /// </summary>
    /// <param name="logger">The logger instance for recording operations and errors</param>
    /// <param name="handler">The command handler responsible for processing commands</param>
    /// <param name="getAggregateIdExpression">Expression to extract the aggregate ID from the request object</param>
    /// <param name="entityName">The human-readable name of the entity type for error messages and logging</param>
    protected EntityControllerBase(
        ILogger logger,
        ICommandHandler<TCommand, TEvent> handler,
        Expression<Func<TRequest, Guid>> getAggregateIdExpression,
        string entityName
    )
    {
        ArgumentNullException.ThrowIfNull(handler);
        ArgumentNullException.ThrowIfNull(logger);
        ArgumentNullException.ThrowIfNull(getAggregateIdExpression);

        AggregateIdPropertyName = GetAggregateIdPropertyName(getAggregateIdExpression);
        GetAggregateId = getAggregateIdExpression.Compile();

        CommandHandler = handler;
        EntityName = entityName;
        Logger = logger;
    }

    /// <summary>
    /// Extracts the property name from an expression that accesses the aggregate ID property.
    /// Used to generate meaningful error messages that reference the specific property name.
    /// </summary>
    /// <param name="getAggregateIdExpression">Expression that accesses a property returning the aggregate ID</param>
    /// <returns>The name of the property accessed in the expression</returns>
    /// <exception cref="InvalidOperationException">Thrown when the expression is not a simple property access</exception>
    protected static string GetAggregateIdPropertyName(Expression<Func<TRequest, Guid>> getAggregateIdExpression)
    {
        if (getAggregateIdExpression.Body is MemberExpression memberExpression)
        {
            return memberExpression.Member.Name;
        }
        throw new InvalidOperationException("GetAggregateId expression must be a simple property access expression");
    }

    /// <summary>
    /// Generates an error message for version conflict scenarios (HTTP 409 Conflict).
    /// Called when optimistic concurrency control detects that the entity has been
    /// modified by another process since the client retrieved it.
    /// </summary>
    /// <param name="ex">The version conflict exception containing details about the conflict</param>
    /// <param name="request">The request that caused the conflict</param>
    /// <param name="aggregateId">The ID of the entity that had the version conflict</param>
    /// <returns>A user-friendly error message explaining the version conflict</returns>
    protected virtual string GetConflictMessage(EventVersionConflictException ex, TRequest request, Guid aggregateId)
    {
        return $"Version conflict for {EntityName} with {AggregateIdPropertyName} {aggregateId}: {ex.Message}";
    }

    /// <summary>
    /// Generates an error message for invalid argument scenarios (HTTP 400 Bad Request).
    /// Called when the request contains invalid data or violates business rules.
    /// </summary>
    /// <param name="ex">The argument exception containing details about the invalid data</param>
    /// <param name="request">The request that contained invalid data</param>
    /// <param name="aggregateId">The ID from the request that had invalid data</param>
    /// <returns>A user-friendly error message explaining the validation failure</returns>
    protected virtual string GetBadRequestMessage(ArgumentException ex, TRequest request, Guid aggregateId)
    {
        return $"Invalid argument for {EntityName} with {AggregateIdPropertyName} {aggregateId}: {ex.Message}";
    }

    /// <summary>
    /// Generates an error message for unexpected server errors (HTTP 500 Internal Server Error).
    /// Called when an unhandled exception occurs during the operation.
    /// </summary>
    /// <param name="ex">The exception that caused the server error</param>
    /// <param name="request">The request that was being processed when the error occurred</param>
    /// <param name="aggregateId">The ID of the entity being processed when the error occurred</param>
    /// <returns>A user-friendly error message for the server error</returns>
    protected virtual string GetServerErrorMessage(Exception ex, TRequest request, Guid aggregateId)
    {
        return $"An unexpected error occurred while processing {EntityName} with {AggregateIdPropertyName} {aggregateId}.";
    }

    /// <summary>
    /// Creates a command object from the validated request.
    /// This method must be implemented by derived classes to convert the request DTO
    /// into the appropriate command type for the specific entity operation.
    /// </summary>
    /// <param name="request">The validated request containing the entity data</param>
    /// <returns>A command object that can be processed by the command handler</returns>
    protected abstract TCommand CreateCommand(TRequest request);
}
